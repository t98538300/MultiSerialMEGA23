/*
// ABCDE&F TO MOVE TO KNOB POSITION ( GRIPPER KEPT OPEN, AND ANGLE RESET TO 0)
// + & - TO ROTATE 30DEG ANTICLOCKWISE & CLOCKWISE  ( AFTER ROTATION GRIPPER KEPT OPEN)
//
// DOBOT TO ARDUINO MEGA, 3 WIRE CONNECTION, DOBOT Rx, Tx, GND ->> MEGA Tx2(PIN16), Rx2(PIN17), GND. ** 5V NO NEED TO CONNECT.  
// HYPER TERMINAL TO ARDUINO MEGA, 4 WIRE CONNECTION, RS232 Rx, Tx, GND, 5V ->> MEGA Rx1(PIN19), Tx1(PIN18), GND, 5V. ** Rx to Rx1 & Tx to Tx1. 
// PC TO ARDUINO MEGA, USB CONNECTION, FOR SERIAL MONITOR AND 5V SUPPLY FOR MEGA, SERIAL MONITOR -->>  MEGA Rx0(PIN), Tx0(PIN), GND, 5V.
//
// PARAMS 0:0000, 1:3F80, 2:4000, 3:4040, 4:4080, 5:40A0, 6:40C0, 7:40E0, 8:4020, 9:4110, 10:4120, 12:4140, 15:4170, 18:4190, 20:41A0,
// PARAMS 10:4120, 20:41A0, 25:41C8, 30:41F0, 40:4220, 45:4234, 50:4248, 60:4270, 70:428C, 75:4296, 80:42A0, 90:42B4, 100:42C8, 
// PARAMS 120:42F0, 150:4316, 180:4334, 200:4348, 210:4352, 225:4361, 230:4366, 240:4370, 250:437A, 270:4387, 300:4396,
// X Axis limits 70mm to 250mm, Y Axis Limits -250mm to +250mm at z - 0mm.
*/

// For Setup *************************************************
byte DOBOTCommandDATA [23];
int DOBOTCommandLength = 0;
int DOBOT_BUFFER_AVAILABLE = 0;
int Serial2Acknowedgement = 0;


//************************* SETUP **************************
void setup() {
InitialiseSerialComs();

//EnableEndEffectorGripper();
//EndEffectorReleased();        // Close the Released
//DisableEndEffectorGripper();  // Disable EndEffector as Gripper
//ReadSerial2();              // Read DOBOT Feedback (serial2)

SetGP4asPWMoutput();          // GP4 as PWM output
//ServoEndEffectorGripped();  //EndEffectorGripped();       // Close the Gripper
ServoEndEffectorReleased(); //EndEffectorReleased();      // Close the Released 

SetPTPJumpParams ();          // set Jump Height and Z Limit.
GetPTPJumpParams();           // Get Jump Height and Z Limit.
ReadSerial2();              // Read DOBOT Feedback (serial2)

SetHOMEParameters();          // Set Home Parameters.
GetHOMEParameters();          // Get Home Parameters.
ReadSerial2();                // Read DOBOT Feedback (serial2)

MoveToIntPosition();          // Move to Initial Position.
ReadSerial2();
SetToHomePosition();          // Set to Home Position.
ReadSerial2();
ServoEndEffectorReleased(); //EndEffectorReleased();      // OPEN the GRIPPER 
Serial.println("Setup Completed");

}  


//**************** LOOP ******************************
void loop() {
//***************** IF SERIAL1 AVAILABLE READ & DECODE COMMOND **********************

 if (Serial1.available()) {
    char MetCalCommand[38];
    for (int i = 0; i < sizeof(MetCalCommand); i++) { // RESERVE SPACE FOR METCAL COMMOND 
      MetCalCommand[i] = ' ';
    }
    int cnt = 0;
    while (Serial1.available()) {
      char temp = Serial1.read();
      MetCalCommand[cnt] = temp;
//        Serial.print("MetCalCommand: ");
//        Serial.write(MetCalCommand[cnt]);
//        Serial.print("(0x");
//        Serial.print(MetCalCommand[cnt], DEC);
//        Serial.print(") & Action:");
 
  switch (MetCalCommand[cnt]) {
  case 65: // "A"
        JumpToPoint_AR0();        // Jump to Point A, End Effector Rotation = 0
    break;
  case 66: // "B"
        JumpToPoint_BR0();        // Jump to Point B, End Effector Rotation = 0
    break;
  case 67: // "C"
        JumpToPoint_CR0();        // Jump to Point C, End Effector Rotation = 0
    break;
  case 68: // "D"
        JumpToPoint_DR0();        // Jump to Point D, End Effector Rotation = 0
    break;
  case 69: // "E"
        JumpToPoint_ER0();        // Jump to Point E, End Effector Rotation = 0
    break;
  case 70: // "F"
        JumpToPoint_FR0();        // Jump to Point F, End Effector Rotation = 0
    break;
  case 43: // "-" (Grip and Rotate) 82: //R
        ServoEndEffectorGripped();  //EndEffectorGripped();       // Close the Gripper
        RotateEndEffector30();      // Rotate Clockwise 30deg
        ServoEndEffectorReleased(); //EndEffectorReleased();      // Close the Released     
    break;
  case 45: // "+" (Grip and Rotate) 78: //N
        ServoEndEffectorGripped(); //EndEffectorGripped();               // Close the Gripper
        ReverseRotateEndEffector30();       // Rotate AntiClockwise 30deg
        ServoEndEffectorReleased(); //EndEffectorReleased();              // Close the Released
    break;
  case 60: // "<" Only Close the Gripper
        ServoEndEffectorGripped();  //EndEffectorGripped();       // Close the Gripper 
    break;
  case 62: // ">"   Only Open the Gripper
        ServoEndEffectorReleased(); //EndEffectorReleased();      // Close the Released  
    break;
  default: 
        Serial1.println("NOT A VALID COMMAND");
        Serial1.println(" A, B, C, D, E, F = MOVE TO RELATED POSITION");
        Serial1.println(" + & <  ROTATE CLOCKWISE 30Deg, - & > ROTATE CLOCKWISE 30Deg");
  break;
  }

      cnt++;
      delayMicroseconds(10);
     ServoEndEffectorReleased(); //EndEffectorReleased();      // Close the Released 
} 
}     
}
//XXXXXXXXXXXXXXX END OF LOOP   XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX


//************* Initialize Serial ******************************************
void InitialiseSerialComs(){
Serial.begin(115200); // can work only at 115200 Rate - to ARDUINO Monitor
Serial1.begin(9600); // MET/CAL MAX SPEED IS 9600 - to MET/CAL PC THROUGH RS232
Serial2.begin(115200); // at 115200 Rate - to DOBOT
Serial.println("Serial0 Start");
}

//************** Move to Initial Position **************************
void MoveToIntPosition(){ 
Serial.print(Serial2.availableForWrite()); // Get the number of bytes (characters) available for writing in the serial buffer without blocking the write operation.
Serial.print(" & ");
Serial.print (Serial2.write(SetPTPJointParams84_00, 23)); // will display No of Bytes transfered.
Serial2.flush();
delay(100);
Serial.println(" DOBOT@ X=230, Y=0, Z=0, R=0, G=Open "); 
}

//******************* Set Home Parameters **************************************
void SetHOMEParameters(){ 
Serial.print(Serial2.availableForWrite());
Serial.print(" & ");
Serial.print(Serial2.write(SetHOMEParams30_00, 22));
Serial2.flush();
Serial.println(" HomePramas Set to X=230, Y=0, Z=0, R=0, G=Open ");
}

//*************** Get Home Parameters ***************************************************************
void GetHOMEParameters(){
Serial.print(Serial2.availableForWrite());
Serial.print(" & ");
Serial.print(Serial2.write(GetHOMEPramas30, 6));
Serial2.flush();
Serial.println(" GetHomePramas = ");
}

//*************** Read from Serial2 ***************************************************************
void ReadSerial2() {
//Serial.println("Return from DOBOT");
while (Serial2.available() > 0) {
// get the new byte:
byte inByte = (byte)Serial2.read();
char tmp[4];
sprintf(tmp, "0x%.2X",inByte);
Serial.print(tmp); 
Serial.print(",");
//Serial.print(inByte, HEX);
}
Serial.println(" ");
}

//***************  EndEffector as Gripper Enable ***************************************************************
void EnableEndEffectorGripper(){
Serial.print(Serial2.availableForWrite());
Serial.print(" & ");
Serial.print(Serial2.write(SetEndEffectorGripper63_E, 8));
Serial2.flush();
delay(100);
Serial.println(" Gripper Enabled ");
}

//***************  EndEffector as Gripper Disable ***************************************************************
void DisableEndEffectorGripper(){
Serial.print(Serial2.availableForWrite());
Serial.print(" & ");
Serial.print(Serial2.write(SetEndEffectorGripper63_D, 8));
Serial2.flush();
//delay(10);
Serial.println(" Gripper Disabled ");
}

//*************** EndEffector Gripper Gripped***************************************************************
void EndEffectorGripped(){
Serial.print(Serial2.availableForWrite());
Serial.print(" & ");
Serial.print(Serial2.write(SetEndEffectorGripper63_G, 8));
Serial2.flush();
delay(4000);
Serial.println(" Gripper Gripped ");
}

//*************** Disable EndEffector as Gripper ***************************************************************
void EndEffectorReleased(){
Serial.print(Serial2.availableForWrite());
Serial.print(" & ");
Serial.print(Serial2.write(SetEndEffectorGripper63_R, 8));
Serial2.flush();
delay(4000);
Serial.println(" Gripper Released ");
}

//*************** set GP4 as PWM for Servo EndEffector Gripper ***************************************************************
void SetGP4asPWMoutput(){
Serial.print(Serial2.availableForWrite());
Serial.print(" & ");
Serial.print(Serial2.write(SetIOMultiplexing130, 8));
Serial2.flush();
delay(3000);
Serial.println(" GP4 Set to PWM output ");
}

//*************** Servo EndEffector Gripper Gripped***************************************************************
void ServoEndEffectorGripped(){
Serial.print(Serial2.availableForWrite());
Serial.print(" & ");
Serial.print(Serial2.write(SetIOPWM132_GP4_G6, 15));
Serial2.flush();
delay(6000);
Serial.println(" Close ");
}

//*************** Servo EndEffector Released ***************************************************************
void ServoEndEffectorReleased(){
Serial.print(Serial2.availableForWrite());
Serial.print(" & ");
Serial.print(Serial2.write(SetIOPWM132_GP4_R, 15));
Serial2.flush();
delay(5000);
Serial.println(" Open ");
}

//*************** Set to Home Position ***************************************************************
void SetToHomePosition(){      
Serial.print(Serial2.availableForWrite());
Serial.print(" & ");
Serial.print(Serial2.write(SetHOMECmd31, 10));
Serial2.flush();
delay(20000);
Serial.println(" DOBOT@ HOME Position ");
}

//*************** Jump To Point A, End Effector Rotation = 00 ***************************************************************
void JumpToPoint_AR0(){  
Serial.print(Serial2.availableForWrite());
Serial.print(" & ");
Serial.print(Serial2.write(SetPTPJointParams84_AR0, 23));
Serial2.flush();
//delay(100);
Serial.println(" DOBOT@ A R=0 ");
}

//*************** Jump To Point B, End Effector Rotation = 00 ***************************************************************
void JumpToPoint_BR0(){  
Serial.print(Serial2.availableForWrite());
Serial.print(" & ");
Serial.print(Serial2.write(SetPTPJointParams84_BR0, 23));
Serial2.flush();
//delay(100);
Serial.println(" DOBOT@ B R=0 ");
}

//*************** Jump To Point A, End Effector Rotation = 00 ***************************************************************
void JumpToPoint_CR0(){  
Serial.print(Serial2.availableForWrite());
Serial.print(" & ");
Serial.print(Serial2.write(SetPTPJointParams84_CR0, 23));
Serial2.flush();
//delay(100);
Serial.println(" DOBOT@ C R=0 ");
}

//*************** Jump To Point B, End Effector Rotation = 00 ***************************************************************
void JumpToPoint_DR0(){  
Serial.print(Serial2.availableForWrite());
Serial.print(" & ");
Serial.print(Serial2.write(SetPTPJointParams84_DR0, 23));
Serial2.flush();
//delay(100);
Serial.println(" DOBOT@ D R=0 ");
}

//*************** Jump To Point A, End Effector Rotation = 00 ***************************************************************
void JumpToPoint_ER0(){  
Serial.print(Serial2.availableForWrite());
Serial.print(" & ");
Serial.print(Serial2.write(SetPTPJointParams84_ER0, 23));
Serial2.flush();
//delay(100);
Serial.println(" DOBOT@ E R=0 ");
}

//*************** Jump To Point B, End Effector Rotation = 00 ***************************************************************
void JumpToPoint_FR0(){  
Serial.print(Serial2.availableForWrite());
Serial.print(" & ");
Serial.print(Serial2.write(SetPTPJointParams84_FR0, 23));
Serial2.flush();
//delay(100);
Serial.println(" DOBOT@ F R=0 ");
}

//*************** AT the same Point End Effector Rotation = 30 deg ***************************************************************
void RotateEndEffector30(){    
Serial.print(Serial2.availableForWrite());
Serial.print(" & ");
Serial.print(Serial2.write(SetPTPJointParams84_Ra30, 23));
Serial2.flush();
delay(2000);
Serial.println(" Rotate 30deg ");
}

//*************** AT the same Point End Effector Rotation = -30 deg ***************************************************************
void ReverseRotateEndEffector30(){    
Serial.print(Serial2.availableForWrite());
Serial.print(" & ");
Serial.print(Serial2.write(SetPTPJointParams84_Rc30, 23));
Serial2.flush();
delay(2000);
Serial.println(" Rotate -30deg ");
} 

//*************** Set Jump Height = 50mm, Z Limit = 100mm ***************************************************************
void SetPTPJumpParams (){
Serial.print(Serial2.availableForWrite());
Serial.print(" & ");
Serial.print(Serial2.write(SetPTPJumpParams82, 10));
Serial2.flush();
//delay(10);
Serial.println(" Set Jump Height = 50mm, Z Limit = 100mm ");
}

//*************** Get Jump Height &, Z Limit ***************************************************************
void GetPTPJumpParams (){
Serial.print(Serial2.availableForWrite());
Serial.print(" & ");
Serial.print(Serial2.write(GetPTPJumpParams82, 2));
Serial2.flush();
//delay(10);
Serial.println(" Jump Height & Z Limit = ");
}

   
